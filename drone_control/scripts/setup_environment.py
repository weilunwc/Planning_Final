#!/usr/bin/env python
import rospy
import sys
from plan_msgs.srv import DrawPoints, DrawPointsRequest, DrawPath, DrawPathRequest
from geometry_msgs.msg import Point

if __name__=="__main__":
    # kinda wait for the urdf model to swapn
    rospy.sleep(5)


    rospy.init_node("setup_environment")
    rospy.logwarn("Set up environment") 
    targets = [[ 14 , -20 , 1.5], [ 0 , 0 , 1]]



    try:
        rospy.logwarn("waiting for draw target service")
        rospy.wait_for_service("/draw_target", 2.0)    
        draw_target = rospy.ServiceProxy("draw_target", DrawPoints)
        rospy.logwarn("got draw target service")
    except ROSException:
        rospy.logwarn("failed to get draw target service")
    
    if draw_target != None:
        draw_target_req = DrawPointsRequest()
        for i in range(len(targets)):
            p = Point()
            p.x = targets[i][0]
            p.y = targets[i][1]
            p.z = targets[i][2]
            draw_target_req.points.append(p)
        draw_target(draw_target_req)
    

    # Do the same thing for depots
    depots = [[1,1,1], [0,0,0]]
    # depots = [[ 14 , -20 , 1.5],
    #     [ 13.984 , -19.9339 , 1.4987],
    #     [ 13.8661 , -19.448 , 1.48915],
    #     [ 13.7482 , -18.9622 , 1.4796],
    #     [ 13.6303 , -18.4764 , 1.47005],
    #     [ 13.5125 , -17.9906 , 1.4605],
    #     [ 13.1533 , -17.6427 , 1.46563],
    #     [ 12.6617 , -17.7181 , 1.41416],
    #     [ 12.4089 , -17.287 , 1.39795],
    #     [ 12.1561 , -16.8559 , 1.38173],
    #     [ 11.9033 , -16.4248 , 1.36552],
    #     [ 11.6505 , -15.9938 , 1.3493],
    #     [ 11.3977 , -15.5627 , 1.33309],
    #     [ 11.1449 , -15.1316 , 1.31687],
    #     [ 10.8235 , -14.7499 , 1.28596],
    #     [ 10.5648 , -14.3223 , 1.26853],
    #     [ 10.3061 , -13.8948 , 1.2511],
    #     [ 10.0475 , -13.4673 , 1.23367],
    #     [ 9.7888 , -13.0397 , 1.21624],
    #     [ 9.53013 , -12.6122 , 1.19881],
    #     [ 9.27146 , -12.1846 , 1.18138],
    #     [ 9.22381 , -11.6871 , 1.16846],
    #     [ 8.97487 , -11.2538 , 1.15118],
    #     [ 8.72593 , -10.8205 , 1.1339],
    #     [ 8.23922 , -10.7079 , 1.11308],
    #     [ 7.97593 , -10.2832 , 1.0954],
    #     [ 7.59068 , -10.0128 , 1.26411],
    #     [ 7.32069 , -9.59209 , 1.25417],
    #     [ 7.05069 , -9.17137 , 1.24424],
    #     [ 6.78069 , -8.75065 , 1.2343],
    #     [ 6.63844 , -8.27429 , 1.18095],
    #     [ 6.37266 , -7.85094 , 1.16943],
    #     [ 5.88121 , -7.75919 , 1.1776],
    #     [ 5.60492 , -7.34261 , 1.16663],
    #     [ 5.30001 , -6.94644 , 1.17545],
    #     [ 5.02277 , -6.53046 , 1.16511],
    #     [ 4.74554 , -6.11449 , 1.15476],
    #     [ 4.24588 , -6.10259 , 1.16909],
    #     [ 3.95869 , -5.69341 , 1.15935],
    #     [ 4.13453 , -5.22667 , 1.12411],
    #     [ 3.85691 , -4.81095 , 1.11353],
    #     [ 3.5793 , -4.39524 , 1.10296],
    #     [ 3.30169 , -3.97952 , 1.09238],
    #     [ 2.98971 , -3.58951 , 1.06874],
    #     [ 2.7112 , -3.1744 , 1.05783],
    #     [ 2.43269 , -2.7593 , 1.04692],
    #     [ 2.0209 , -2.47582 , 1.05519],
    #     [ 1.7388 , -2.06313 , 1.04472],
    #     [ 1.75 , -1.56338 , 1.03369],
    #     [ 1.47335 , -1.14702 , 1.02316],
    #     [ 0.974554 , -1.11511 , 1.0366],
    #     [ 0.690725 , -0.703597 , 1.0265],
    #     [ 0.286671 , -0.40953 , 1.01024],
    #     [ 0 , 0 , 1]]

    # depots = [[-9.5, -6.5, 0.5],
    #         [-9.5, -6.5, 0.5],
    #         [-9.53642, -6.49942, 0.561522],
    #         [-9.33775, -6.47766, 0.553926],
    #         [-9.14956, -6.45175, 0.616473],
    #         [-8.96136, -6.42584, 0.679021],
    #         [-8.77953, -6.50687, 0.659831],
    #         [-8.58428, -6.50873, 0.703144],
    #         [-8.43401, -6.37688, 0.709031],
    #         [-8.239, -6.35436, 0.747272],
    #         [-8.04341,  -6.31271,  0.75029],
    #         [-7.84975,  -6.36151,  0.739576],
    #         [-7.70778,  -6.22065,  0.738444],
    #         [-7.70864,  -6.0207 , 0.742918],
    #         [-7.51708,  -5.96944,  0.768895],
    #         [-7.34889,  -5.86121,  0.769608],
    #         [-7.15854,  -5.80468,  0.793466],
    #         [-6.96818,  -5.74815,  0.817324],
    #         [-6.78247,  -5.68703,  0.775189],
    #         [-6.59176,  -5.62998,  0.794502],
    #         [-6.40104,  -5.57293,  0.813814],
    #         [-6.22561,  -5.47747,  0.803223],
    #         [-6.20749,  -5.27865,  0.791275],
    #         [-6.02062,  -5.20933,  0.807807],
    #         [-5.83374,  -5.14001,  0.824339],
    #         [-5.90512,  -4.95471,  0.848212],
    #         [-5.7221 , -4.87604 , 0.86594],
    #         [-5.54755, -4.77905,  0.85473],
    #         [-5.41773, -4.62695,  0.857813],
    #         [-5.23652, -4.5438 , 0.873696],
    #         [-5.05939, -4.45235,  0.857585],
    #         [-4.87825, -4.36883,  0.872171],
    #         [-4.90747, -4.17102,  0.868024],
    #         [-4.91267, -3.9712, 0.874742],
    #         [-5.00235, -3.7933, 0.857096],
    #         [-4.99386, -3.59349, 0.856465],
    #         [-4.82616, -3.48532, 0.869731],
    #         [-4.65846, -3.37715, 0.882998],
    #         [-4.49076, -3.26898, 0.896264],
    #         [-4.30901, -3.18552, 0.897184],
    #         [-4.14079, -3.07811, 0.910055],
    #         [-3.96346, -2.98565, 0.907617],
    #         [-3.83426, -2.83359, 0.894014],
    #         [-3.69618, -2.68966, 0.8793],
    #         [-3.52924, -2.58006, 0.89021],
    #         [-3.33309, -2.619, 0.893059],
    #         [-3.16406, -2.51263, 0.903832],
    #         [-2.96564, -2.48772, 0.90093],
    #         [-2.79544, -2.38321, 0.911373],
    #         [-2.62524, -2.2787, 0.921817],
    #         [-2.45503, -2.17419 , 0.93226],
    #         [-2.50875, -1.98163 , 0.938013],
    #         [-2.34101, -1.87322 , 0.948522],
    #         [-2.20038, -1.73103 , 0.946562],
    #         [-2.03316, -1.62178 , 0.956791],
    #         [-1.86595, -1.51254 , 0.967021],
    #         [-1.8073 ,-1.32159 , 0.957009],
    #         [-1.88669, -1.1381 , 0.962323],
    #         [-1.72337, -1.02308 , 0.97224],
    #         [-1.64165, -0.84057 , 0.968743],
    #         [-1.47955, -0.723826 , 0.978413],
    #         [-1.28927, -0.66742 , 1.00317],
    #         [-1.12642, -0.551741 , 1.01315],
    #         [-0.983946 , -0.411831 , 1.00197],
    #         [-0.821433 , -0.295651 , 1.01155],
    #         [-0.661792 , -0.415545 , 0.999715],
    #         [-0.497233 , -0.302258 , 1.00902],
    #         [-0.303614 , -0.25687 , 0.987771],
    #         [-0.164906 , -0.11283 , 0.991321],
    #         [0, 0 , 1]]
    try:
        rospy.logwarn("waiting for draw depot service")
        rospy.wait_for_service("/draw_depot", 2.0)    
        draw_depot = rospy.ServiceProxy("draw_depot", DrawPoints)
        rospy.logwarn("got draw depot service")
    except ROSException:
        rospy.logwarn("failed to get draw depot service")

    if draw_depot != None:
        draw_depot_req = DrawPointsRequest()
        for i in range(len(depots)):
            p = Point()
            p.x = depots[i][0]
            p.y = depots[i][1]
            p.z = depots[i][2]
            draw_depot_req.points.append(p)
        rospy.loginfo("{0}".format(draw_depot_req))
        draw_depot(draw_depot_req)
    
    


    
    rospy.spin()

